import { Contracts } from "@arkecosystem/core-kernel";
import { Utils } from "@arkecosystem/crypto";
export declare class WalletRepository implements Contracts.State.WalletRepository {
    private readonly indexerIndexes;
    private readonly createWalletFactory;
    private readonly stateStore;
    protected readonly indexes: Record<string, Contracts.State.WalletIndex>;
    initialize(): void;
    createWallet(address: string): Contracts.State.Wallet;
    getIndex(name: string): Contracts.State.WalletIndex;
    getIndexNames(): string[];
    allByAddress(): ReadonlyArray<Contracts.State.Wallet>;
    allByPublicKey(): ReadonlyArray<Contracts.State.Wallet>;
    allByUsername(): ReadonlyArray<Contracts.State.Wallet>;
    findByAddress(address: string): Contracts.State.Wallet;
    findByPublicKey(publicKey: string): Contracts.State.Wallet;
    findByUsername(username: string): Contracts.State.Wallet;
    findByIndex(index: string, key: string): Contracts.State.Wallet;
    findByIndexes(indexes: string[], key: string): Contracts.State.Wallet;
    has(key: string): boolean;
    hasByAddress(address: string): boolean;
    hasByPublicKey(publicKey: string): boolean;
    hasByUsername(username: string): boolean;
    hasByIndex(indexName: string, key: string): boolean;
    getNonce(publicKey: string): Utils.BigNumber;
    forgetByAddress(address: string): void;
    forgetByPublicKey(publicKey: string): void;
    forgetByUsername(username: string): void;
    forgetByIndex(indexName: string, key: string): void;
    index(wallets: Contracts.State.Wallet | ReadonlyArray<Contracts.State.Wallet>): void;
    reset(): void;
    search<T>(scope: Contracts.State.SearchScope, params?: Contracts.Database.QueryParameters): Contracts.Search.ListResult<T>;
    findByScope(scope: Contracts.State.SearchScope, id: string): Contracts.State.Wallet;
    count(scope: Contracts.State.SearchScope): number;
    top(scope: Contracts.State.SearchScope, params?: Record<string, any>): Contracts.Search.ListResult<Contracts.State.Wallet>;
    private indexWallet;
    private searchWallets;
    private searchDelegates;
    private searchLocks;
    private searchEntities;
}
